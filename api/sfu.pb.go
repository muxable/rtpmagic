// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: sfu.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string     `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Signal   *anypb.Any `protobuf:"bytes,2,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sfu_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sfu_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_sfu_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SubscribeRequest) GetSignal() *anypb.Any {
	if x != nil {
		return x.Signal
	}
	return nil
}

var File_sfu_proto protoreflect.FileDescriptor

var file_sfu_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x66, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x32, 0x82, 0x01, 0x0a, 0x03, 0x53,
	0x46, 0x55, 0x12, 0x3b, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x3e, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x75,
	0x78, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x73, 0x66, 0x75, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sfu_proto_rawDescOnce sync.Once
	file_sfu_proto_rawDescData = file_sfu_proto_rawDesc
)

func file_sfu_proto_rawDescGZIP() []byte {
	file_sfu_proto_rawDescOnce.Do(func() {
		file_sfu_proto_rawDescData = protoimpl.X.CompressGZIP(file_sfu_proto_rawDescData)
	})
	return file_sfu_proto_rawDescData
}

var file_sfu_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_sfu_proto_goTypes = []interface{}{
	(*SubscribeRequest)(nil), // 0: api.SubscribeRequest
	(*anypb.Any)(nil),        // 1: google.protobuf.Any
}
var file_sfu_proto_depIdxs = []int32{
	1, // 0: api.SubscribeRequest.signal:type_name -> google.protobuf.Any
	1, // 1: api.SFU.Publish:input_type -> google.protobuf.Any
	0, // 2: api.SFU.Subscribe:input_type -> api.SubscribeRequest
	1, // 3: api.SFU.Publish:output_type -> google.protobuf.Any
	1, // 4: api.SFU.Subscribe:output_type -> google.protobuf.Any
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sfu_proto_init() }
func file_sfu_proto_init() {
	if File_sfu_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sfu_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sfu_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sfu_proto_goTypes,
		DependencyIndexes: file_sfu_proto_depIdxs,
		MessageInfos:      file_sfu_proto_msgTypes,
	}.Build()
	File_sfu_proto = out.File
	file_sfu_proto_rawDesc = nil
	file_sfu_proto_goTypes = nil
	file_sfu_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SFUClient is the client API for SFU service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SFUClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (SFU_PublishClient, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (SFU_SubscribeClient, error)
}

type sFUClient struct {
	cc grpc.ClientConnInterface
}

func NewSFUClient(cc grpc.ClientConnInterface) SFUClient {
	return &sFUClient{cc}
}

func (c *sFUClient) Publish(ctx context.Context, opts ...grpc.CallOption) (SFU_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SFU_serviceDesc.Streams[0], "/api.SFU/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &sFUPublishClient{stream}
	return x, nil
}

type SFU_PublishClient interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ClientStream
}

type sFUPublishClient struct {
	grpc.ClientStream
}

func (x *sFUPublishClient) Send(m *anypb.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sFUPublishClient) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sFUClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (SFU_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SFU_serviceDesc.Streams[1], "/api.SFU/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &sFUSubscribeClient{stream}
	return x, nil
}

type SFU_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*anypb.Any, error)
	grpc.ClientStream
}

type sFUSubscribeClient struct {
	grpc.ClientStream
}

func (x *sFUSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sFUSubscribeClient) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SFUServer is the server API for SFU service.
type SFUServer interface {
	Publish(SFU_PublishServer) error
	Subscribe(SFU_SubscribeServer) error
}

// UnimplementedSFUServer can be embedded to have forward compatible implementations.
type UnimplementedSFUServer struct {
}

func (*UnimplementedSFUServer) Publish(SFU_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedSFUServer) Subscribe(SFU_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterSFUServer(s *grpc.Server, srv SFUServer) {
	s.RegisterService(&_SFU_serviceDesc, srv)
}

func _SFU_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SFUServer).Publish(&sFUPublishServer{stream})
}

type SFU_PublishServer interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ServerStream
}

type sFUPublishServer struct {
	grpc.ServerStream
}

func (x *sFUPublishServer) Send(m *anypb.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sFUPublishServer) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SFU_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SFUServer).Subscribe(&sFUSubscribeServer{stream})
}

type SFU_SubscribeServer interface {
	Send(*anypb.Any) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type sFUSubscribeServer struct {
	grpc.ServerStream
}

func (x *sFUSubscribeServer) Send(m *anypb.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sFUSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SFU_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SFU",
	HandlerType: (*SFUServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _SFU_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _SFU_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sfu.proto",
}
